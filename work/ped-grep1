Script started on Sat 08 Oct 2016 01:44:31 PM EDT
]0;tricia@ubbie: ~/pedtricia@ubbie:~/ped$ grep it haiku.txt 
 But now [01;31m[Kit[m[K is gone.
 Yesterday [01;31m[Kit[m[K worked
 Today [01;31m[Kit[m[K is not working
 Of l[01;31m[Kit[m[Ktle worth is your ire
]0;tricia@ubbie: ~/pedtricia@ubbie:~/ped$ grep it haiku.txt [1@-[C[1@i[1@ 
 [01;31m[KIt[m[K might be very useful.
 But now [01;31m[Kit[m[K is gone.
 Yesterday [01;31m[Kit[m[K worked
 Today [01;31m[Kit[m[K is not working
 Of l[01;31m[Kit[m[Ktle worth is your ire
]0;tricia@ubbie: ~/pedtricia@ubbie:~/ped$ grep -i it haiku.txt [C[1P[1@v
 A file that big?
 It might be very useful.

 Windows is like that

 Stay the patient course
 The network is down

 Three things are certain:
 Death, taxes, and lost data.
 Guess which has occurred.
]0;tricia@ubbie: ~/pedtricia@ubbie:~/ped$ grep -v it haiku.txt [1@i
 A file that big?

 Windows is like that

 Stay the patient course
 The network is down

 Three things are certain:
 Death, taxes, and lost data.
 Guess which has occurred.
]0;tricia@ubbie: ~/pedtricia@ubbie:~/ped$ grep -vi it haiku.txt [C[C[1P[1P[1@w
 But now [01;31m[Kit[m[K is gone.
 Yesterday [01;31m[Kit[m[K worked
 Today [01;31m[Kit[m[K is not working
]0;tricia@ubbie: ~/pedtricia@ubbie:~/ped$ grep -w it haiku.txt [1@i
 [01;31m[KIt[m[K might be very useful.
 But now [01;31m[Kit[m[K is gone.
 Yesterday [01;31m[Kit[m[K worked
 Today [01;31m[Kit[m[K is not working
]0;tricia@ubbie: ~/pedtricia@ubbie:~/ped$ grep -wi it haiku.txt [C[1@n[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[1P[1P
[32m[K3[m[K[36m[K:[m[K But now [01;31m[Kit[m[K is gone.
[32m[K5[m[K[36m[K:[m[K Yesterday [01;31m[Kit[m[K worked
[32m[K6[m[K[36m[K:[m[K Today [01;31m[Kit[m[K is not working
[32m[K10[m[K[36m[K:[m[K Of l[01;31m[Kit[m[Ktle worth is your ire
]0;tricia@ubbie: ~/pedtricia@ubbie:~/ped$ grep -n it haiku.txt [1@v
[32m[K1[m[K[36m[K:[m[K A file that big?
[32m[K2[m[K[36m[K:[m[K It might be very useful.
[32m[K4[m[K[36m[K:[m[K
[32m[K7[m[K[36m[K:[m[K Windows is like that
[32m[K8[m[K[36m[K:[m[K
[32m[K9[m[K[36m[K:[m[K Stay the patient course
[32m[K11[m[K[36m[K:[m[K The network is down
[32m[K12[m[K[36m[K:[m[K
[32m[K13[m[K[36m[K:[m[K Three things are certain:
[32m[K14[m[K[36m[K:[m[K Death, taxes, and lost data.
[32m[K15[m[K[36m[K:[m[K Guess which has occurred.
]0;tricia@ubbie: ~/pedtricia@ubbie:~/ped$ grep that 
well now we forgot the file name t it expects input       typed input
but it will only show matching lines with that
but it will only show matching lines with [01;31m[Kthat[m[K
we got one how about another that
we got one how about another [01;31m[Kthat[m[K
this n one has nothing
ta hat one has something
[01;31m[Kthat[m[K one has something
exit with ctrl-d
]0;tricia@ubbie: ~/pedtricia@ubbie:~/ped$ grep --help 
Usage: grep [OPTION]... PATTERN [FILE]...
Search for PATTERN in each FILE or standard input.
PATTERN is, by default, a basic regular expression (BRE).
Example: grep -i 'hello world' menu.h main.c

Regexp selection and interpretation:
  -E, --extended-regexp     PATTERN is an extended regular expression (ERE)
  -F, --fixed-strings       PATTERN is a set of newline-separated strings
  -G, --basic-regexp        PATTERN is a basic regular expression (BRE)
  -P, --perl-regexp         PATTERN is a Perl regular expression
  -e, --regexp=PATTERN      use PATTERN for matching
  -f, --file=FILE           obtain PATTERN from FILE
  -i, --ignore-case         ignore case distinctions
  -w, --word-regexp         force PATTERN to match only whole words
  -x, --line-regexp         force PATTERN to match only whole lines
  -z, --null-data           a data line ends in 0 byte, not newline

Miscellaneous:
  -s, --no-messages         suppress error messages
  -v, --invert-match        select non-matching lines
  -V, --version             display version information and exit
      --help                display this help text and exit

Output control:
  -m, --max-count=NUM       stop after NUM matches
  -b, --byte-offset         print the byte offset with output lines
  -n, --line-number         print line number with output lines
      --line-buffered       flush output on every line
  -H, --with-filename       print the file name for each match
  -h, --no-filename         suppress the file name prefix on output
      --label=LABEL         use LABEL as the standard input file name prefix
  -o, --only-matching       show only the part of a line matching PATTERN
  -q, --quiet, --silent     suppress all normal output
      --binary-files=TYPE   assume that binary files are TYPE;
                            TYPE is 'binary', 'text', or 'without-match'
  -a, --text                equivalent to --binary-files=text
  -I                        equivalent to --binary-files=without-match
  -d, --directories=ACTION  how to handle directories;
                            ACTION is 'read', 'recurse', or 'skip'
  -D, --devices=ACTION      how to handle devices, FIFOs and sockets;
                            ACTION is 'read' or 'skip'
  -r, --recursive           like --directories=recurse
  -R, --dereference-recursive  likewise, but follow all symlinks
      --include=FILE_PATTERN  search only files that match FILE_PATTERN
      --exclude=FILE_PATTERN  skip files and directories matching FILE_PATTERN
      --exclude-from=FILE   skip files matching any file pattern from FILE
      --exclude-dir=PATTERN  directories that match PATTERN will be skipped.
  -L, --files-without-match  print only names of FILEs containing no match
  -l, --files-with-matches  print only names of FILEs containing matches
  -c, --count               print only a count of matching lines per FILE
  -T, --initial-tab         make tabs line up (if needed)
  -Z, --null                print 0 byte after FILE name

Context control:
  -B, --before-context=NUM  print NUM lines of leading context
  -A, --after-context=NUM   print NUM lines of trailing context
  -C, --context=NUM         print NUM lines of output context
  -NUM                      same as --context=NUM
      --color[=WHEN],
      --colour[=WHEN]       use markers to highlight the matching strings;
                            WHEN is 'always', 'never', or 'auto'
  -U, --binary              do not strip CR characters at EOL (MSDOS/Windows)
  -u, --unix-byte-offsets   report offsets as if CRs were not there
                            (MSDOS/Windows)

'egrep' means 'grep -E'.  'fgrep' means 'grep -F'.
Direct invocation as either 'egrep' or 'fgrep' is deprecated.
When FILE is -, read standard input.  With no FILE, read . if a command-line
-r is given, - otherwise.  If fewer than two FILEs are given, assume -h.
Exit status is 0 if any line is selected, 1 otherwise;
if any error occurs and -q is not given, the exit status is 2.

Report bugs to: bug-grep@gnu.org
GNU grep home page: <http://www.gnu.org/software/grep/>
General help using GNU software: <http://www.gnu.org/gethelp/>
]0;tricia@ubbie: ~/pedtricia@ubbie:~/ped$ exit
exit

Script done on Sat 08 Oct 2016 01:52:19 PM EDT
